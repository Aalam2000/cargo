[
    {
        "role": "system",
        "content": "Ты помощник разработчика."
    },
    {
        "role": "user",
        "content": "Вы: Теперь при сохранении каждой строки - и при добавлении новой и при редактировании нужно проверять на уникальность поля, которое для этой таблицы должно быть уникально. Технология, которую я хочу применить: Если не все поля заполнены - они подсвечиваются красным а кнопка \"Сохранить\" недоступна. Как только все поля заполнены и значения, которые должны быть уникальны действительно уникальны - кнопка \"Сохранить\" становится доступна. Какие данные тебе предоставить чтоб ты дал качественную редакцию кода? Может css или cargo_acc/models.py или еще какой то код? Сначала попроси или скажи что ни чего не нужно и только потом приступай к редактированию."
    },
    {
        "role": "assistant",
        "content": "Чтобы помочь с реализацией этой функциональности, мне потребуется немного информации о вашем коде и окружении разработки. Пожалуйста, предоставьте:\n\n1. **Модель данных:** Код модели из `cargo_acc/models.py`, чтобы понять, какие поля требуют уникальности.\n\n2. **Форма для ввода данных:** Код формы, если вы используете `forms.py` в Django, или JavaScript/HTML код, если валидация происходит на стороне клиента.\n\n3. **Фронтенд код:** CSS и JavaScript код, который управляет валидацией и подсветкой полей.\n\nЭти данные помогут мне предложить качественные изменения как на стороне сервера (например, через валидации в Django), так и на стороне клиента (например, через JavaScript).\n\nПожалуйста, предоставьте описанные выше части кода, и я с удовольствием помогу с редактированием."
    },
    {
        "role": "user",
        "content": "# File: cargo_acc/models.py\r\n\r\nfrom django.db import models\r\n\r\n# Модель Компании\r\nclass Company(models.Model):\r\n    name = models.CharField(max_length=255, unique=True)\r\n    registration = models.CharField(max_length=50)\r\n    description = models.CharField(max_length=500, blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n# Модель Клиента\r\nclass Client(models.Model):\r\n    client_code = models.CharField(max_length=20, unique=True)\r\n    company = models.ForeignKey(Company, on_delete=models.CASCADE)\r\n    description = models.CharField(max_length=500, blank=True, null=True)\r\n\r\n    def save(self, *args, **kwargs):\r\n        super().save(*args, **kwargs)\r\n        from .views import mark_clients_changed\r\n        mark_clients_changed()\r\n\r\n    def delete(self, *args, **kwargs):\r\n        super().delete(*args, **kwargs)\r\n        from .views import mark_clients_changed\r\n        mark_clients_changed()\r\n\r\n    def __str__(self):\r\n        return self.client_code\r\n\r\n# Модель Склада\r\nclass Warehouse(models.Model):\r\n    name = models.CharField(max_length=100, unique=True)\r\n    address = models.CharField(max_length=500, blank=True, null=True)\r\n    company = models.ForeignKey(Company, on_delete=models.CASCADE)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n# Модель Типов груза\r\nclass CargoType(models.Model):\r\n    name = models.CharField(max_length=20, unique=True)\r\n    description = models.CharField(max_length=50, blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n# Модель Статуса груза\r\nclass CargoStatus(models.Model):\r\n    name = models.CharField(max_length=20, unique=True)\r\n    description = models.CharField(max_length=50, blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n# Модель Типов упаковок\r\nclass PackagingType(models.Model):\r\n    name = models.CharField(max_length=20, unique=True)\r\n    description = models.CharField(max_length=50, blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass Image(models.Model):\r\n    image_file = models.ImageField(upload_to='img/', default='img/default_image.jpg')\r\n    upload_date = models.DateTimeField(auto_now_add=True)\r\n\r\n    def __str__(self):\r\n        return self.image_file.name\r\n\r\n# Модель Товаров\r\nclass Product(models.Model):\r\n    client = models.ForeignKey(Client, on_delete=models.CASCADE)\r\n    product_code = models.CharField(max_length=30, unique=True)\r\n    company = models.ForeignKey(Company, on_delete=models.CASCADE)\r\n    warehouse = models.ForeignKey(Warehouse, on_delete=models.CASCADE)\r\n    record_date = models.DateField(null=True, blank=True)\r\n    cargo_description = models.CharField(max_length=500, blank=True, null=True)\r\n    cargo_type = models.ForeignKey(CargoType, on_delete=models.CASCADE)\r\n    departure_place = models.CharField(max_length=200, blank=True, null=True)\r\n    destination_place = models.CharField(max_length=200, blank=True, null=True)\r\n    weight = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)\r\n    volume = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)\r\n    cost = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)\r\n    insurance = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)\r\n    dimensions = models.CharField(max_length=30, blank=True, null=True)\r\n    shipping_date = models.DateField(null=True, blank=True)\r\n    delivery_date = models.DateField(null=True, blank=True)\r\n    cargo_status = models.ForeignKey(CargoStatus, on_delete=models.CASCADE)\r\n    images = models.ManyToManyField(Image)\r\n    packaging_type = models.ForeignKey(PackagingType, on_delete=models.CASCADE)\r\n    delivery_time = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\r\n    comment = models.CharField(max_length=500, blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return self.product_code\r\n\r\n# Модель Грузов\r\nclass Cargo(models.Model):\r\n    client = models.ForeignKey(Client, on_delete=models.CASCADE)\r\n    cargo_code = models.CharField(max_length=20, unique=True)\r\n    products = models.ManyToManyField(Product)\r\n    images = models.ManyToManyField(Image)\r\n    departure_place = models.CharField(max_length=200, blank=True, null=True)\r\n    destination_place = models.CharField(max_length=200, blank=True, null=True)\r\n    weight = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)  # Изменено\r\n    volume = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)  # Изменено\r\n    cost = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)  # Изменено\r\n    insurance = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)  # Изменено\r\n    dimensions = models.CharField(max_length=30, blank=True, null=True)\r\n    shipping_date = models.DateField(null=True, blank=True)\r\n    delivery_date = models.DateField(null=True, blank=True)\r\n    cargo_status = models.ForeignKey(CargoStatus, on_delete=models.CASCADE)\r\n    packaging_type = models.ForeignKey(PackagingType, on_delete=models.CASCADE)\r\n    delivery_time = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)  # Изменено\r\n\r\n    def __str__(self):\r\n        return self.cargo_code\r\n\r\n# Модель Компаний-перевозчиков\r\nclass CarrierCompany(models.Model):\r\n    name = models.CharField(max_length=255, unique=True)\r\n    registration = models.CharField(max_length=50)\r\n    description = models.CharField(max_length=500, blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n# Модель Автомобилей\r\nclass Vehicle(models.Model):\r\n    license_plate = models.CharField(max_length=20, unique=True)\r\n    model = models.CharField(max_length=100, blank=True, null=True)\r\n    carrier_company = models.ForeignKey(CarrierCompany, on_delete=models.CASCADE)\r\n    current_status = models.CharField(max_length=100, blank=True, null=True)\r\n\r\n    def __str__(self):\r\n        return self.license_plate\r\n\r\n# Модель Транспортных накладных\r\nclass TransportBill(models.Model):\r\n    bill_code = models.CharField(max_length=20, unique=True)\r\n    cargos = models.ManyToManyField(Cargo)\r\n    vehicle = models.ForeignKey(Vehicle, on_delete=models.CASCADE)\r\n    departure_place = models.CharField(max_length=200, blank=True, null=True)\r\n    destination_place = models.CharField(max_length=200, blank=True, null=True)\r\n    departure_date = models.DateField()\r\n    arrival_date = models.DateField(null=True, blank=True)\r\n    carrier_company = models.ForeignKey(CarrierCompany, on_delete=models.CASCADE)\r\n\r\n    def __str__(self):\r\n        return self.bill_code\r\n\r\n# Модель Перемещения грузов\r\nclass CargoMovement(models.Model):\r\n    cargo = models.ForeignKey(Cargo, on_delete=models.CASCADE)\r\n    from_transport_bill = models.ForeignKey(TransportBill, related_name='from_transport_bill', on_delete=models.CASCADE)\r\n    to_transport_bill = models.ForeignKey(TransportBill, related_name='to_transport_bill', on_delete=models.CASCADE)\r\n    transfer_place = models.CharField(max_length=255, blank=True, null=True)\r\n    transfer_date = models.DateTimeField()\r\n\r\n    def __str__(self):\r\n        return f'Move {self.cargo} from {self.from_transport_bill} to {self.to_transport_bill}'\r\n\r\n\r\n/*File: static/css/table.css*/\r\n\r\n/* Контейнер таблицы */\r\n.table-container {\r\n    /*overflow-x: auto; !* Горизонтальная прокрутка *!*/\r\n    /*overflow-y: auto; !* Вертикальная прокрутка *!*/\r\n    /*height: 400px;*/\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n    margin-top: 20px;\r\n}\r\n\r\n/* Основная таблица */\r\n.table {\r\n    display: block;\r\n    overflow-x: auto; /* Горизонтальная прокрутка */\r\n    overflow-y: auto; /* Вертикальная прокрутка */\r\n    height: 400px;\r\n    width: 100%;\r\n    table-layout: fixed; /* Фиксированная ширина столбцов */\r\n    border-collapse: collapse;\r\n}\r\n\r\n/* Заголовки таблицы */\r\n.table thead th {\r\n    background-color: #007BFF;\r\n    color: white;\r\n    font-weight: bold;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 1;\r\n    box-shadow: 0 2px 2px -1px rgba(0, 0, 0, 0.4);\r\n    text-align: center;\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n    box-sizing: border-box;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis; /* Добавляем троеточие для длинного текста */\r\n    white-space: nowrap; /* Отключаем перенос текста */\r\n    /* Минимальная ширина столбца (при необходимости) */\r\n    min-width: 50px;\r\n}\r\n\r\n/* Ячейки таблицы */\r\n.table tbody td {\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    box-sizing: border-box;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis; /* Добавляем троеточие для длинного текста */\r\n    white-space: nowrap; /* Отключаем перенос текста */\r\n}\r\n\r\n/* Зебра-эффект для строк */\r\n.table tbody tr:nth-child(even) {\r\n    background-color: #f9f9f9;\r\n}\r\n\r\n.table tbody tr:nth-child(odd) {\r\n    background-color: #ffffff;\r\n}\r\n\r\n/* Эффект при наведении на строку */\r\n.table tbody tr:hover {\r\n    background-color: #f1f1f1;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Контейнер заголовка с кнопками */\r\n.table-header-container {\r\n    overflow: hidden;\r\n    border-bottom: 1px solid #ddd;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 15px;\r\n}\r\n\r\n/* Контейнер для кнопок */\r\n.table-header-buttons {\r\n    display: flex;\r\n    gap: 10px; /* Отступ между кнопками */\r\n}\r\n\r\n/* Кнопка добавления */\r\n.add-button {\r\n    background-color: #007BFF;\r\n    color: white;\r\n    border: none;\r\n    padding: 10px 15px;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n    font-size: 1em;\r\n    transition: background-color 0.3s ease;\r\n}\r\n\r\n.add-button:hover {\r\n    background-color: #0056b3;\r\n}\r\n\r\n/* Настройка шестеренки */\r\n.settings-button {\r\n    background: none; /* Убираем фон кнопки */\r\n    border: none; /* Убираем рамку */\r\n    padding: 0; /* Убираем отступы */\r\n    cursor: pointer; /* Курсор как на кнопке */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: transform 0.2s ease; /* Добавляем анимацию при наведении */\r\n}\r\n\r\n/* Шестеренка */\r\n.settings-button i {\r\n    font-size: 30px; /* Размер шестеренки */\r\n    color: #007BFF; /* Синий цвет */\r\n}\r\n\r\n/* Эффект при наведении на шестеренку */\r\n.settings-button:hover i {\r\n    color: #0056b3; /* Темнее при наведении */\r\n    transform: rotate(20deg); /* Легкое вращение при наведении */\r\n}\r\n\r\n/* Контейнер для фильтра */\r\n.filter-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start; /* Выровнять метку и поле по левому краю */\r\n    margin-left: 20px; /* Отступ от заголовка \"Клиенты\" */\r\n}\r\n\r\n.filter-container input {\r\n    padding: 8px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 5px;\r\n    width: 200px; /* Фиксированная ширина поля */\r\n    font-size: 1em;\r\n}\r\n\r\n.table thead th.delete-cell {\r\n    width: 50px !important;\r\n    min-width: 50px !important;\r\n    max-width: 50px !important;\r\n}\r\n\r\n.table thead th.delete-header {\r\n    width: 1%;\r\n    white-space: nowrap;\r\n    padding: 0;\r\n    text-align: center;\r\n}\r\n\r\n.delete-header {\r\n    width: 50px;\r\n    min-width: 50px;\r\n    max-width: 50px;\r\n    padding: 0;\r\n    text-align: center;\r\n    white-space: nowrap;\r\n}\r\n\r\n/* Ячейка для удаления */\r\n.delete-cell {\r\n    width: 50px; /* Фиксированная ширина */\r\n    min-width: 50px; /* Предотвращаем сжатие */\r\n    max-width: 50px; /* Предотвращаем растяжение */\r\n    height: 100%; /* Высота соответствует высоте строки */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0; /* Убираем внутренние отступы */\r\n    box-sizing: border-box; /* Включаем границы в размеры */\r\n}\r\n\r\n/* Иконка внутри ячейки */\r\n.delete-cell i {\r\n    font-size: 18px; /* Оптимальный размер иконки */\r\n    color: #5d1010;\r\n    transition: transform 0.2s;\r\n}\r\n\r\n/* Эффект при наведении на иконку */\r\n.delete-cell i:hover {\r\n    transform: scale(1.2);\r\n}\r\n\r\n/* Стиль для delete-modal */\r\n#delete-modal {\r\n    display: none; /* По умолчанию скрыто */\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 1050;\r\n    background-color: white;\r\n    width: 400px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n/* Стиль для product-modal */\r\n#product-modal, #settings-modal {\r\n    height: auto; /* Убираем фиксированную высоту */\r\n    display: none;\r\n    position: fixed;\r\n    top: 20%; /* Поднимаем выше */\r\n    left: 50%;\r\n    transform: translate(-50%, -20%);\r\n    z-index: 1050;\r\n    background-color: white;\r\n    width: 400px;\r\n    border-radius: 10px;\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n\r\n/* Заголовки модальных окон */\r\n#delete-modal-header, #product-modal-header, #settings-modal-header {\r\n    background-color: #007BFF;\r\n    color: white;\r\n    padding: 10px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-radius: 10px 10px 0 0;\r\n}\r\n\r\n/* Тело модальных окон */\r\n#delete-modal-body, #product-modal-body {\r\n    padding: 20px;\r\n    font-size: 14px;\r\n    text-align: center;\r\n}\r\n\r\n/* Сетка для формы */\r\n#product-modal-body form {\r\n    display: grid;\r\n    grid-template-columns: 1fr; /* По умолчанию одна колонка имен полей и одна поля */\r\n    gap: 12px;\r\n}\r\n\r\n/* Элементы формы */\r\n.form-group {\r\n    display: grid;\r\n    grid-template-columns: auto 1fr; /* Две колонки: первая для лейбла, вторая для поля ввода */\r\n    align-items: center;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n/* Лейблы */\r\n.form-group label {\r\n    justify-self: end;\r\n    margin-right: 8px;\r\n}\r\n\r\n/* Поля ввода */\r\n.form-group .form-control {\r\n    justify-self: start;\r\n    width: 100%; /* Одинаковая ширина для всех полей */\r\n}\r\n\r\n.grid-form {\r\n    display: grid;\r\n    grid-template-columns: 1fr; /* Одна колонка по умолчанию */\r\n    gap: 10px; /* Отступы между полями */\r\n}\r\n\r\n#product-modal-body-two form {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 15px;\r\n    padding: 20px;\r\n    background: #f5f5f5;\r\n    border-radius: 8px;\r\n}\r\n\r\n.grid-form.two-columns .form-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n/* Подвал модальных окон */\r\n#delete-modal-footer, #product-modal-footer, #settings-modal-footer {\r\n    padding: 10px;\r\n    display: flex;\r\n    justify-content: space-around;\r\n}\r\n\r\n/* Кнопки закрытия */\r\n#delete-close-modal, #product-close-modal {\r\n    background: none;\r\n    border: none;\r\n    color: white;\r\n    font-size: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n#delete-close-modal:hover, #product-close-modal:hover, #settings-modal-modal:hover {\r\n    color: #ff0000; /* При наведении */\r\n}\r\n\r\n/*Модальные окна*/\r\n.modal-open {\r\n    overflow: hidden; /* Отключаем прокрутку */\r\n}\r\n\r\n.modal-open::before {\r\n    content: '';\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: rgba(0, 0, 0, 0.5); /* Полупрозрачный черный фон */\r\n    z-index: 1040; /* Значение z-index выше, чем у модального окна */\r\n}\r\n\r\n.d-flex {\r\n    display: flex;\r\n}\r\n\r\n.gap-3 {\r\n    gap: 1rem;\r\n}\r\n\r\n.flex-grow-1 {\r\n    flex-grow: 1;\r\n}\r\n\r\n/*Список клиентов*/\r\n.dropdown-menu {\r\n    position: absolute;\r\n    max-height: 200px; /* Ограничение высоты */\r\n    overflow-y: auto; /* Скроллинг, если слишком много элементов */\r\n    border: 1px solid #ccc;\r\n    background-color: white;\r\n    box-shadow: 0 4px 6px rgb(11, 43, 252);\r\n    z-index: 1050;\r\n    width: 100%;\r\n    left: 0;\r\n    padding: 0; /* Убираем лишние отступы */\r\n    margin: 0; /* Убираем отступы */\r\n    font-size: small;\r\n}\r\n\r\n\r\n.dropdown-item {\r\n    padding: 8px 12px;\r\n    cursor: pointer;\r\n}\r\n.dropdown-item:hover {\r\n    background-color: #f0f0f0;\r\n}\r\n\r\n/* Сетка для динамического расположения полей */\r\n.d-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr); /* Две колонки одинаковой ширины */\r\n    gap: 1rem; /* Отступы между элементами */\r\n    align-items: start; /* Поля выравниваются по верхнему краю */\r\n}\r\n\r\n/* Модальное окно динамически подстраивается */\r\n.modal {\r\n    max-width: 700px; /* Ограничиваем максимальную ширину */\r\n    width: 90%; /* Автоматическая ширина */\r\n    height: auto; /* Высота под содержимое */\r\n    max-height: 90vh; /* Ограничиваем максимальную высоту */\r\n    overflow-y: auto; /* Добавляем прокрутку при необходимости */\r\n    position: relative; /* Сохраняем относительное позиционирование */\r\n    padding: 1rem; /* Внутренние отступы */\r\n    background: #fff; /* Белый фон для модального окна */\r\n    border-radius: 8px; /* Скругленные углы */\r\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Легкая тень */\r\n}\r\n\r\n\r\n/*******/\r\n#client-dropdown {\r\n    position: absolute;\r\n    background-color: white;\r\n    border: 1px solid #ccc;\r\n    max-height: 150px;\r\n    overflow-y: auto;\r\n    width: 100%;\r\n    z-index: 1050;\r\n}\r\n#client::placeholder {\r\n    color: #a4a4a4;\r\n    font-style: italic;\r\n}\r\n\r\nВот функция заполнения полей после открытия модальной формы в которой я хочу это применить:\r\n\r\nfunction fillModalFields(modalId, tableId, editMode, rowInfo = null) {\r\n    const tableData = tableMetadata[tableId];\r\n    if (!tableData) {\r\n        console.error(`=== fillModalFields === Метаданные для таблицы ${tableId} не найдены.`);\r\n        return;\r\n    }\r\n\r\n    // Если у нас есть информация о строке, создаем карту name -> dataIndex\r\n    const fieldIndexMap = tableData.fields.reduce((map, field, index) => {\r\n        map[field.name] = index;\r\n        return map;\r\n    }, {});\r\n\r\n    tableData.fields.forEach(field => {\r\n        if (!field.visible) return;\r\n\r\n        const input = document.getElementById(`${modalId}-${field.name}`);\r\n        if (!input) return;\r\n\r\n        if (editMode && rowInfo) {\r\n            // Ищем значение по индексу\r\n            const index = fieldIndexMap[field.name];\r\n            input.value = rowInfo.data[index] ?? '';\r\n\r\n            if (field.type === 'ForeignKey') {\r\n                loadOptionsForSelect(input, field.relatedModel, rowInfo.data[index]);\r\n            }\r\n        } else {\r\n            // Новый режим: устанавливаем значение по умолчанию\r\n            input.value = getDefaultValue(field.type);\r\n\r\n            if (field.type === 'ForeignKey') {\r\n                loadOptionsForSelect(input, field.relatedModel);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nПодумай - какой еще код - что он делает - тебе дать чтоб мы эту доработку сделали максимально просто и быстро?\r\n\r\nМомент - эта модальная форма должна следить за вводом символов в поле, которое должно быть уникальным и меняет цвет мгновенно - в зависимости от того уникальный набор символов или нет."
    },
    {
        "role": "assistant",
        "content": "Для реализации функциональности проверки уникальности значений и динамической подсветки полей в модальной форме нужно будет рассмотреть несколько аспектов:\n\n1. **HTML и JavaScript для Фронтенда:**\n\n   - Как вы генерируете HTML для модальной формы и как вы наблюдаете за изменениями в полях ввода. Будет полезно увидеть HTML-шаблон для модальной формы.\n\n   - JavaScript-код, который изменяет стили и включает/отключает кнопку \"Сохранить\" в зависимости от заполненности и уникальности полей.\n\n   - Подходит ли текущая функция заполнения полей модальной формы `fillModalFields`, или вам потребуется добавить дополнительную логику.\n\n2. **AJAX-запросы на уникальность:**\n\n   - Код для AJAX-запросов, которые будут отправляться на сервер для проверки уникальности вводимого значения. На стороне сервера можно создать специальный вьюс для обработки таких запросов и возвращения ответа о том, уникально ли поле.\n\n3. **Django View:**\n\n   - Если у вас есть Django-вьюс, который обрабатывает запросы сохранения данных в модальной форме, этот обработчик также может быть использован для проверки уникальности.\n\n4. **Форма в Django (если используется):**\n\n   - Код из `forms.py` (если он существует), чтобы адаптировать валидацию данных на стороне сервера.\n\nДля начала, если у вас есть HTML-шаблон для модальной формы и код JavaScript, который управляет элементами интерфейса при вводе данных, пожалуйста, предоставьте эти части. Это будет отправной точкой для добавления функциональности проверки уникальности. Также, покажите, как обрабатываются AJAX-запросы на стороне сервера и как инициируется их отправка в JavaScript."
    },
    {
        "role": "user",
        "content": "ВОт что есть:\r\n\r\n#cargodb/forms.py\r\nfrom django import forms\r\nfrom django.contrib.auth.forms import AuthenticationForm\r\n\r\nclass UserLoginForm(AuthenticationForm):\r\n    username = forms.EmailField(widget=forms.EmailInput(attrs={\r\n        'class': 'form-control',\r\n        'placeholder': 'Введите ваш email'\r\n    }))\r\n    password = forms.CharField(widget=forms.PasswordInput(attrs={\r\n        'class': 'form-control',\r\n        'placeholder': 'Введите ваш пароль'\r\n    }))\r\n\r\n{#File: templates/cargo_acc/mod_addrow.html#}\r\n<!-- Оверлей: должен быть вне модального окна -->\r\n<div id=\"modal-overlay\" style=\"display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 999;\"></div>\r\n<!-- Модальное окно: отдельный элемент -->\r\n<div id=\"product-modal\" style=\"display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000; background-color: white; border-radius: 10px;\">\r\n    <div id=\"product-modal-header\">\r\n        <span id=\"product-modal-title\">Изменение строки</span>\r\n        <button id=\"product-close-modal\">&times;</button>\r\n    </div>\r\n    <div id=\"product-modal-body\">\r\n        <!-- Здесь будут ваши поля -->\r\n    </div>\r\n    <div id=\"product-modal-footer\">\r\n        <button id=\"product-cancel-modal\">Отмена</button>\r\n        <button id=\"product-modal-save\">Сохранить</button>\r\n    </div>\r\n</div>\r\n\r\n# File: cargo_acc/views.py\r\n\r\nimport json\r\nimport os\r\nimport time\r\n\r\nimport transliterate\r\nfrom django.apps import apps\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.core.paginator import Paginator, EmptyPage\r\nfrom django.http import JsonResponse\r\nfrom django.http import StreamingHttpResponse\r\nfrom django.shortcuts import get_object_or_404\r\nfrom django.shortcuts import render\r\nfrom django.utils.decorators import method_decorator\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom rest_framework import status\r\nfrom rest_framework import viewsets\r\nfrom rest_framework.pagination import PageNumberPagination\r\nfrom rest_framework.permissions import AllowAny\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework.viewsets import ModelViewSet\r\n\r\nfrom .models import Client\r\nfrom .models import Company, Warehouse, CargoType, CargoStatus, PackagingType, Image, Product, Cargo, \\\r\n    CarrierCompany, Vehicle, TransportBill, CargoMovement\r\nfrom .serializers import CompanySerializer, ClientSerializer, WarehouseSerializer, CargoTypeSerializer, \\\r\n    CargoStatusSerializer, PackagingTypeSerializer, ImageSerializer, ProductSerializer, CargoSerializer, \\\r\n    CarrierCompanySerializer, VehicleSerializer, TransportBillSerializer, CargoMovementSerializer\r\n\r\n\r\ndef settings_modal(request):\r\n    return render(request, 'cargo_acc/settings_modal.html')\r\n\r\n\r\ndef client_table_page(request):\r\n    \"\"\"Отображение страницы с таблицей клиентов.\"\"\"\r\n    return render(request, 'cargo_acc/client_table.html')\r\n\r\n\r\ndef mod_addrow_view(request):\r\n    return render(request, 'cargo_acc/mod_addrow.html')\r\n\r\ndef mod_delrow_view(request):\r\n    return render(request, 'cargo_acc/mod_delrow.html')\r\n\r\n\r\ndef client_table_data(request):\r\n    \"\"\"API для выгрузки таблицы клиентов с фильтрацией и пагинацией.\"\"\"\r\n    try:\r\n        # Фильтрация по параметру 'search' из GET-запроса\r\n        search_query = request.GET.get('search', '').lower()\r\n        clients = Client.objects.filter(client_code__icontains=search_query).select_related('company')\r\n\r\n        # Пагинация\r\n        paginator = Paginator(clients, 10)  # 10 записей на страницу\r\n        page = request.GET.get('page', 1)\r\n        try:\r\n            clients_page = paginator.page(page)\r\n        except EmptyPage:\r\n            return JsonResponse({'results': [], 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n        # Формирование результата\r\n        result = [\r\n            {'id': client.id, 'client_code': client.client_code, 'company': client.company.name}\r\n            for client in clients_page\r\n        ]\r\n        return JsonResponse({\r\n            'results': result,\r\n            'page': page,\r\n            'total_pages': paginator.num_pages,\r\n        })\r\n\r\n    except Exception as e:\r\n        # Логирование ошибки вместо print\r\n        import logging\r\n        logger = logging.getLogger(__name__)\r\n        logger.error(f\"Ошибка: {e}\")\r\n        return JsonResponse({'error': str(e)}, status=500)\r\n\r\n\r\ndef get_clients(request):\r\n    search_query = request.GET.get('search', '').lower()\r\n    page = int(request.GET.get('page', 1))  # Параметр страницы\r\n    page_size = int(request.GET.get('page_size', 7))  # Лимит записей\r\n\r\n    clients = Client.objects.filter(client_code__icontains=search_query)\r\n    paginator = Paginator(clients, page_size)\r\n\r\n    try:\r\n        clients_page = paginator.page(page)\r\n    except EmptyPage:\r\n        return JsonResponse({'results': [], 'error': 'Страница не существует'}, status=404)\r\n\r\n    result = [{'id': c.id, 'client_code': c.client_code} for c in clients_page]\r\n    return JsonResponse({\r\n        'results': result,\r\n        'page': page,\r\n        'total_pages': paginator.num_pages,\r\n    })\r\n\r\n\r\ndef get_warehouses(request):\r\n    search_query = request.GET.get('search', '').lower()\r\n    warehouses = Warehouse.objects.filter(name__icontains=search_query).select_related('company')\r\n\r\n    # Пагинация\r\n    paginator = Paginator(warehouses, 10)\r\n    page = request.GET.get('page', 1)\r\n    try:\r\n        warehouses_page = paginator.page(page)\r\n    except EmptyPage:\r\n        return JsonResponse({'results': [], 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n    result = [\r\n        {'id': warehouse.id, 'name': warehouse.name, 'address': warehouse.address, 'company': warehouse.company.name}\r\n        for warehouse in warehouses_page\r\n    ]\r\n    return JsonResponse({'results': result, 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n\r\ndef get_companies(request):\r\n    search_query = request.GET.get('search', '').lower()\r\n    companies = Company.objects.filter(name__icontains=search_query)\r\n\r\n    # Пагинация\r\n    paginator = Paginator(companies, 10)\r\n    page = request.GET.get('page', 1)\r\n    try:\r\n        companies_page = paginator.page(page)\r\n    except EmptyPage:\r\n        return JsonResponse({'results': [], 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n    result = [\r\n        {'id': company.id, 'name': company.name, 'registration': company.registration,\r\n         'description': company.description}\r\n        for company in companies_page\r\n    ]\r\n    return JsonResponse({'results': result, 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n\r\ndef get_cargo_types(request):\r\n    search_query = request.GET.get('search', '').lower()\r\n    cargo_types = CargoType.objects.filter(name__icontains=search_query)\r\n\r\n    # Пагинация\r\n    paginator = Paginator(cargo_types, 10)\r\n    page = request.GET.get('page', 1)\r\n    try:\r\n        cargo_types_page = paginator.page(page)\r\n    except EmptyPage:\r\n        return JsonResponse({'results': [], 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n    result = [\r\n        {'id': cargo_type.id, 'name': cargo_type.name, 'description': cargo_type.description}\r\n        for cargo_type in cargo_types_page\r\n    ]\r\n    return JsonResponse({'results': result, 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n\r\ndef get_cargo_statuses(request):\r\n    search_query = request.GET.get('search', '').lower()\r\n    cargo_statuses = CargoStatus.objects.filter(name__icontains=search_query)\r\n\r\n    # Пагинация\r\n    paginator = Paginator(cargo_statuses, 10)\r\n    page = request.GET.get('page', 1)\r\n    try:\r\n        cargo_statuses_page = paginator.page(page)\r\n    except EmptyPage:\r\n        return JsonResponse({'results': [], 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n    result = [\r\n        {'id': cargo_status.id, 'name': cargo_status.name, 'description': cargo_status.description}\r\n        for cargo_status in cargo_statuses_page\r\n    ]\r\n    return JsonResponse({'results': result, 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n\r\ndef get_packaging_types(request):\r\n    search_query = request.GET.get('search', '').lower()\r\n    packaging_types = PackagingType.objects.filter(name__icontains=search_query)\r\n\r\n    # Пагинация\r\n    paginator = Paginator(packaging_types, 10)\r\n    page = request.GET.get('page', 1)\r\n    try:\r\n        packaging_types_page = paginator.page(page)\r\n    except EmptyPage:\r\n        return JsonResponse({'results': [], 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n    result = [\r\n        {'id': packaging_type.id, 'name': packaging_type.name, 'description': packaging_type.description}\r\n        for packaging_type in packaging_types_page\r\n    ]\r\n    return JsonResponse({'results': result, 'page': page, 'total_pages': paginator.num_pages})\r\n\r\n\r\ndef add_image_to_product(request, product_id):\r\n    \"\"\"API для загрузки картинки.\"\"\"\r\n    if request.method == 'POST' and request.FILES.get('image_file'):\r\n        product = get_object_or_404(Product, id=product_id)\r\n\r\n        # Создаем новое изображение и сохраняем его\r\n        image = Image.objects.create(image_file=request.FILES['image_file'])\r\n\r\n        # Добавляем это изображение к продукту\r\n        product.images.add(image)\r\n\r\n        return JsonResponse({\r\n            'success': True,\r\n            'image_url': image.image_file.url,\r\n            'message': 'Изображение успешно добавлено!',\r\n        })\r\n    return JsonResponse({'success': False, 'message': 'Ошибка при добавлении изображения.'}, status=400)\r\n\r\n\r\ndef transliterate_filename(filename):\r\n    \"\"\"API для записи латиницей.\"\"\"\r\n    name, ext = os.path.splitext(filename)\r\n    # Транслитерация имени файла с кириллицы на латиницу\r\n    return transliterate.translit(name, 'ru', reversed=True) + ext\r\n\r\n\r\n# Проверка уникальности названия типа упаковки\r\ndef check_packaging_type_name(request):\r\n    \"\"\"API для проверки уникальности названия типа упаковки.\"\"\"\r\n    packaging_type_name = request.GET.get('name', '')\r\n    is_unique = not PackagingType.objects.filter(name=packaging_type_name).exists()\r\n    return JsonResponse({'is_unique': is_unique})\r\n\r\n\r\n# Проверка уникальности названия статуса груза\r\ndef check_cargo_status_name(request):\r\n    \"\"\"API для проверки уникальности названия статуса груза.\"\"\"\r\n    cargo_status_name = request.GET.get('name', '')\r\n    is_unique = not CargoStatus.objects.filter(name=cargo_status_name).exists()\r\n    return JsonResponse({'is_unique': is_unique})\r\n\r\n\r\n# Проверка уникальности названия типа груза\r\ndef check_cargo_type_name(request):\r\n    \"\"\"API для проверки уникальности названия типа груза.\"\"\"\r\n    cargo_type_name = request.GET.get('name', '')\r\n    is_unique = not CargoType.objects.filter(name=cargo_type_name).exists()\r\n    return JsonResponse({'is_unique': is_unique})\r\n\r\n\r\ndef check_client_code(request):\r\n    \"\"\"API для проверки уникальности названия Клиента.\"\"\"\r\n    client_code = request.GET.get('client_code', '')\r\n    is_unique = not Client.objects.filter(client_code=client_code).exists()\r\n    return JsonResponse({'is_unique': is_unique})\r\n\r\n\r\ndef check_company_name(request):\r\n    \"\"\"API для проверки уникальности названия Компании.\"\"\"\r\n    company_name = request.GET.get('name', '')\r\n    is_unique = not Company.objects.filter(name=company_name).exists()\r\n    return JsonResponse({'is_unique': is_unique})\r\n\r\n\r\ndef check_warehouse_name(request):\r\n    \"\"\"API для проверки уникальности названия Склада.\"\"\"\r\n    warehouse_name = request.GET.get('name', '')\r\n    is_unique = not Warehouse.objects.filter(name=warehouse_name).exists()\r\n    return JsonResponse({'is_unique': is_unique})\r\n\r\n\r\n@csrf_exempt\r\ndef add_client(request):\r\n    \"\"\"API для добавления клиента.\"\"\"\r\n    if request.method == 'POST':\r\n        try:\r\n            # Чтение данных из запроса\r\n            data = json.loads(request.body)\r\n            client_code = data.get('client_code')\r\n            company_name = data.get('company')\r\n            description = data.get('description')\r\n\r\n            # Поиск или создание компании\r\n            company, created = Company.objects.get_or_create(name=company_name)\r\n\r\n            # Создание клиента с компанией\r\n            client = Client.objects.create(\r\n                client_code=client_code,\r\n                company=company,  # Ссылка на объект компании\r\n                description=description\r\n            )\r\n\r\n            return JsonResponse({'message': 'Client created successfully', 'client_id': client.id}, status=201)\r\n        except Exception as e:\r\n            return JsonResponse({'error': str(e)}, status=400)\r\n    return JsonResponse({'error': 'Invalid request method'}, status=405)\r\n\r\n\r\n# Вьюшка для загрузки настроек таблицы\r\n@login_required\r\ndef get_table_settings(request):\r\n    user = request.user\r\n    return JsonResponse(user.table_settings or {})\r\n\r\n\r\n# Вьюшка для сохранения настроек таблицы\r\n@csrf_exempt\r\n@login_required\r\ndef save_table_settings(request):\r\n    if request.method == 'POST':\r\n        data = json.loads(request.body)\r\n        request.user.table_settings = data\r\n        request.user.save()\r\n        return JsonResponse({'status': 'success'})\r\n    return JsonResponse({'status': 'error'}, status=400)\r\n\r\n\r\nclass UniversalDeleteView(APIView):\r\n    permission_classes = [AllowAny]  # Доступ для всех\r\n\r\n    @method_decorator(csrf_exempt, name='dispatch')\r\n    def delete(self, request, model_name, pk):\r\n        try:\r\n            # Динамически получаем модель по имени\r\n            model = apps.get_model('cargo_acc', model_name)\r\n            # Пытаемся найти запись по ID\r\n            instance = model.objects.get(pk=pk)\r\n            instance.delete()  # Удаляем запись\r\n            return JsonResponse({'message': 'Запись успешно удалена'}, status=status.HTTP_204_NO_CONTENT)\r\n        except model.DoesNotExist:\r\n            return JsonResponse({'error': 'Запись не найдена'}, status=status.HTTP_404_NOT_FOUND)\r\n        except LookupError:\r\n            return JsonResponse({'error': 'Модель не найдена'}, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\n# ViewSet для Компаний\r\nclass CompanyViewSet(viewsets.ModelViewSet):\r\n    queryset = Company.objects.all()\r\n    serializer_class = CompanySerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Клиентов\r\nclass ClientViewSet(viewsets.ModelViewSet):\r\n    queryset = Client.objects.all()\r\n    serializer_class = ClientSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'client_code')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Складов\r\nclass WarehouseViewSet(viewsets.ModelViewSet):\r\n    queryset = Warehouse.objects.all()\r\n    serializer_class = WarehouseSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Типов Груза\r\nclass CargoTypeViewSet(viewsets.ModelViewSet):\r\n    queryset = CargoType.objects.all()\r\n    serializer_class = CargoTypeSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Статусов Груза\r\nclass CargoStatusViewSet(viewsets.ModelViewSet):\r\n    queryset = CargoStatus.objects.all()\r\n    serializer_class = CargoStatusSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Типов Упаковок\r\nclass PackagingTypeViewSet(viewsets.ModelViewSet):\r\n    queryset = PackagingType.objects.all()\r\n    serializer_class = PackagingTypeSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Изображений\r\nclass ImageViewSet(viewsets.ModelViewSet):\r\n    queryset = Image.objects.all()\r\n    serializer_class = ImageSerializer\r\n\r\n    def perform_create(self, serializer):\r\n        image = self.request.FILES['image_file']\r\n        image.name = transliterate_filename(image.name)  # Применяем транслитерацию к имени файла\r\n        serializer.save(image_file=image)\r\n\r\n\r\n# ViewSet для Товаров\r\nclass ProductPagination(PageNumberPagination):\r\n    page_size = 20  # Количество записей на странице\r\n    page_size_query_param = 'page_size'\r\n\r\n\r\n# Класс `ProductViewSet` является часть DRF (Django Rest Framework) и предоставляет API-интерфейс для работы с моделью `Product`. Он наследует от `ModelViewSet`, который предоставляет ряд стандартных действий, таких как создание, обновление, удаление и получение объектов.\r\n#\r\n# ### Основные компоненты и назначение:\r\n#\r\n# 1. **QuerySet:**\r\n#    - Используется `select_related` для выборки связанных объектов `client`, `company`, `warehouse`, `cargo_type`, `cargo_status`, и `packaging_type`, что оптимизирует запросы, выполняя SQL JOIN. Это позволяет избежать N+1 проблемы при обращении к связанным данным.\r\n#    - `prefetch_related` применяется для поля `images`, что оптимизирует выборку объектов с ManyToMany отношениями, кэшируя связанные объекты в отдельном запросе.\r\n#\r\n# 2. **Serializer:**\r\n#    - `serializer_class = ProductSerializer` указывает на сериализатор, который будет использоваться для преобразования объектов `Product` в JSON и обратно.\r\n#\r\n# 3. **HTTP методы:**\r\n#    - `http_method_names` перечисляет методы, которые поддерживает данный ViewSet. Это стандартный набор методов для REST API: получение, создание, полное и частичное обновление, удаление, а также обработка заголовков.\r\n#\r\n# 4. **Метод `list`:**\r\n#    - Этот метод обрабатывает GET-запросы для получения списка продуктов.\r\n#    - **Пагинация:** Сначала проверяется, поддерживает ли запрос пагинацию. Если да, продукция будет разбита на страницы, чтобы уменьшить нагрузку на сервер и клиент.\r\n#    - **Сериализация:** Объекты сериализуются в JSON-формат и отправляются обратно в виде HTTP-ответа.\r\n#    - Метод `list` переопределяется, чтобы убедиться, что используется весь QuerySet без вызова `values()`, что сохраняет полную структуру объектов при сериализации.\r\n#\r\n# ### Общий API функционал:\r\n#\r\n# - **GET** `/products/`: Получает список всех продуктов.\r\n# - **POST** `/products/`: Создает новый продукт.\r\n# - **PUT/PATCH** `/products/{id}/`: Обновляет указанный продукт.\r\n# - **DELETE** `/products/{id}/`: Удаляет указанный продукт.\r\n#\r\n# Это ViewSet обеспечивает CRUD функционал для модели `Product` в рамках RESTful API, позволяя клиентам осуществлять операции с учетными записями продуктов с помощью отправки HTTP-запросов.\r\nclass ProductViewSet(ModelViewSet):\r\n    queryset = Product.objects.select_related(\r\n        'client', 'company', 'warehouse', 'cargo_type', 'cargo_status', 'packaging_type'\r\n    ).prefetch_related('images')\r\n    serializer_class = ProductSerializer\r\n    http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options']\r\n\r\n    def list(self, request, *args, **kwargs):\r\n        # Возвращаем QuerySet без использования values()\r\n        queryset = self.queryset.all()\r\n        page = self.paginate_queryset(queryset)\r\n        if page is not None:\r\n            serializer = self.get_serializer(page, many=True)\r\n            return self.get_paginated_response(serializer.data)\r\n\r\n        serializer = self.get_serializer(queryset, many=True)\r\n        return Response(serializer.data)\r\n\r\n\r\n# ViewSet для Грузов\r\nclass CargoViewSet(viewsets.ModelViewSet):\r\n    queryset = Cargo.objects.all()\r\n    serializer_class = CargoSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Компаний-Перевозчиков\r\nclass CarrierCompanyViewSet(viewsets.ModelViewSet):\r\n    queryset = CarrierCompany.objects.all()\r\n    serializer_class = CarrierCompanySerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Автомобилей\r\nclass VehicleViewSet(viewsets.ModelViewSet):\r\n    queryset = Vehicle.objects.all()\r\n    serializer_class = VehicleSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Транспортных Накладных\r\nclass TransportBillViewSet(viewsets.ModelViewSet):\r\n    queryset = TransportBill.objects.all()\r\n    serializer_class = TransportBillSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\n# ViewSet для Перемещений Грузов\r\nclass CargoMovementViewSet(viewsets.ModelViewSet):\r\n    queryset = CargoMovement.objects.all()\r\n    serializer_class = CargoMovementSerializer\r\n\r\n    def get_queryset(self):\r\n        queryset = super().get_queryset()  # Получаем первоначальный queryset из родительского метода\r\n        sort_by = self.request.query_params.get('sort_by', 'name')  # Получаем параметр для сортировки из запроса\r\n        return queryset.order_by(sort_by)  # Сортируем по переданному полю (по умолчанию 'name')\r\n\r\n\r\nlast_update_timestamp = time.time()\r\n\r\n\r\n# Функция `mark_clients_changed` служит для обновления временной метки, указывающей на то, что данные о клиентах были изменены.\r\ndef mark_clients_changed():\r\n    global last_update_timestamp\r\n    last_update_timestamp = time.time()\r\n\r\n\r\n# Функция `sse_clients_stream` предназначена для передачи данных о клиентах в режиме реального времени через серверную отправку событий (Server-Sent Events, SSE)\r\ndef sse_clients_stream(request):\r\n    def event_stream():\r\n        local_ts = 0\r\n        while True:\r\n            if last_update_timestamp > local_ts:\r\n                data = list(Client.objects.values('id', 'client_code', 'description'))\r\n                yield f\"data: {json.dumps(data, ensure_ascii=False)}\\n\\n\"\r\n                local_ts = last_update_timestamp\r\n            time.sleep(30)\r\n\r\n    return StreamingHttpResponse(event_stream(), content_type='text/event-stream')"
    },
    {
        "role": "assistant",
        "content": "Теперь у нас есть достаточно информации, чтобы реализовать подсветку полей и проверку уникальности для модальной формы. Давайте обсудим, как можно это сделать.\n\n### 1. Добавление JavaScript для проверки уникальности\n\nНа клиентской стороне потребуется JS-код для отправки AJAX-запроса к серверу при каждом изменении значения в поле. Если значение не уникально, поле подсвечивается красным, а кнопка \"Сохранить\" становится недоступной.\n\n#### Шаги:\n\n1. **Подключите jQuery (или используйте чистый JavaScript)** для упрощения работы с AJAX и DOM-манипуляциями.\n\n2. **Пишите функцию JavaScript**, которая будет вызывать соответствующий API для проверки уникальности значения поля каждый раз, когда оно изменяется.\n\n3. **Меняйте стили поля и состояние кнопки \"Сохранить\"** в зависимости от ответа сервера.\n\nВот примерный код JavaScript, который можно добавить в вашем шаблоне `mod_addrow.html`:\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n<script>\n$(document).ready(function() {\n    // Функция для проверки уникальности\n    function checkUnique(url, fieldId, callback) {\n        const fieldValue = $(fieldId).val();\n        if (!fieldValue) {\n            callback(true); // Если поле пустое, считаем это некорректным для перехода\n            return;\n        }\n\n        // Выполняем AJAX-запрос для проверки уникальности\n        $.get(url, { name: fieldValue }, function(data) {\n            callback(data.is_unique);\n        });\n    }\n\n    // Пример для поля названия компании\n    $('#your-unique-field-id').on('input', function() {\n        const saveButton = $('#product-modal-save');\n        checkUnique('/your-unique-check-url/', '#your-unique-field-id', function(isUnique) {\n            if (isUnique) {\n                $('#your-unique-field-id').css('border-color', ''); // Сбрасываем цвет\n                saveButton.prop('disabled', false); // Включаем кнопку\n            } else {\n                $('#your-unique-field-id').css('border-color', 'red'); // Красим в красный\n                saveButton.prop('disabled', true); // Отключаем кнопку\n            }\n        });\n    });\n});\n</script>\n```\n\n### 2. Django View и URL\n\nУбедитесь, что у вас есть правильные URL маршруты и обработчики для всех ваших уникальных полей. В `urls.py` нужно указать все пути к соответствующим видам:\n\n```python\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('check-company-name/', views.check_company_name, name='check_company_name'),\n    path('check-client-code/', views.check_client_code, name='check_client_code'),\n    # Добавьте другие пути по аналогии\n]\n```\n\n### 3. Валидация на сервере\n\nВ Django у вас уже есть методы для проверки уникальности этих полей. Позаботьтесь о том, чтобы соответствующие вьюсы (`views`) возвращали JSON-ответ о том, уникально ли поле.\n\n### 4. Дополнительные улучшения\n\n- Включите проверку для всех полей, требующих уникальности.\n- Рассмотрите обработку ошибок и сообщайте пользователю, если возникнет ошибка при проверке.\n- Если данные не слишком большие, подумайте о кешировании каких-либо запросов для повышения производительности.\n\nТакой подход обеспечит динамическую проверку уникальности ввода и предоставит пользователю моментальную обратную связь."
    }
]