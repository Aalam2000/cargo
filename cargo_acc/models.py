# File: cargo_acc/models.py

from django.db import models


# –ú–æ–¥–µ–ª—å –ö–æ–º–ø–∞–Ω–∏–∏
class Company(models.Model):
    name = models.CharField(max_length=255, unique=True)
    registration = models.CharField(max_length=50)
    description = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return self.name


# –ú–æ–¥–µ–ª—å –ö–ª–∏–µ–Ω—Ç–∞
class Client(models.Model):
    client_code = models.CharField(max_length=20, unique=True)
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    description = models.CharField(max_length=500, blank=True, null=True)

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        from .views import mark_clients_changed
        mark_clients_changed()

    def delete(self, *args, **kwargs):
        super().delete(*args, **kwargs)
        from .views import mark_clients_changed
        mark_clients_changed()

    def __str__(self):
        return self.client_code


# –ú–æ–¥–µ–ª—å –°–∫–ª–∞–¥–∞
class Warehouse(models.Model):
    name = models.CharField(max_length=100, unique=True)
    address = models.CharField(max_length=500, blank=True, null=True)
    company = models.ForeignKey(Company, on_delete=models.CASCADE)

    def __str__(self):
        return self.name


# –ú–æ–¥–µ–ª—å –¢–∏–ø–æ–≤ –≥—Ä—É–∑–∞
class CargoType(models.Model):
    name = models.CharField(max_length=20, unique=True)
    description = models.CharField(max_length=50, blank=True, null=True)

    def __str__(self):
        return self.name


# –ú–æ–¥–µ–ª—å –°—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–∑–∞
class CargoStatus(models.Model):
    name = models.CharField(max_length=20, unique=True)
    description = models.CharField(max_length=50, blank=True, null=True)

    def __str__(self):
        return self.name


# –ú–æ–¥–µ–ª—å –¢–∏–ø–æ–≤ —É–ø–∞–∫–æ–≤–æ–∫
class PackagingType(models.Model):
    name = models.CharField(max_length=20, unique=True)
    description = models.CharField(max_length=50, blank=True, null=True)

    def __str__(self):
        return self.name


# –ú–æ–¥–µ–ª—å –§–æ—Ç–æ–∫
class Image(models.Model):
    image_file = models.ImageField(upload_to='img/', default='img/default_image.jpg')
    upload_date = models.DateTimeField(auto_now_add=True)

    # üîπ –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ñ–æ—Ç–æ—Ñ–∏–∫—Å–∞—Ü–∏–∏
    operator = models.ForeignKey('accounts.CustomUser', on_delete=models.SET_NULL, null=True, blank=True)
    geo_lat = models.DecimalField(max_digits=9, decimal_places=6, null=True, blank=True)
    geo_lon = models.DecimalField(max_digits=9, decimal_places=6, null=True, blank=True)
    object_type = models.CharField(max_length=50, blank=True, null=True)  # cargo / product / transportbill / etc.
    object_id = models.PositiveBigIntegerField(null=True, blank=True)  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç (–±–µ–∑ FK)
    description = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return f"{self.image_file.name} ({self.object_type or 'unlinked'})"


# –ú–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤
class QRScan(models.Model):
    image = models.ForeignKey(Image, on_delete=models.CASCADE, related_name='qr_scans')
    decoded_data = models.CharField(max_length=255, blank=True, null=True)
    recognized_type = models.CharField(max_length=50, blank=True, null=True)  # cargo / product / transportbill
    recognized_id = models.PositiveBigIntegerField(null=True, blank=True)  # id –æ–±—ä–µ–∫—Ç–∞
    recognized_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(
        max_length=20,
        choices=[('success', 'Success'), ('fail', 'Fail'), ('uncertain', 'Uncertain')],
        default='uncertain'
    )
    action_result = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return f"QRScan {self.id} ({self.status})"


# –ú–æ–¥–µ–ª—å –¢–æ–≤–∞—Ä–æ–≤
class Product(models.Model):
    client = models.ForeignKey(Client, on_delete=models.CASCADE)
    product_code = models.CharField(max_length=30, unique=True)
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    warehouse = models.ForeignKey(Warehouse, on_delete=models.CASCADE)
    qr_code = models.CharField(max_length=100, unique=True, blank=True, null=True)
    qr_created_at = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    record_date = models.DateField(null=True, blank=True)
    cargo_description = models.CharField(max_length=500, blank=True, null=True)
    cargo_type = models.ForeignKey(CargoType, on_delete=models.CASCADE)
    departure_place = models.CharField(max_length=200, blank=True, null=True)
    destination_place = models.CharField(max_length=200, blank=True, null=True)
    weight = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    volume = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    cost = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    insurance = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    dimensions = models.CharField(max_length=30, blank=True, null=True)
    shipping_date = models.DateField(null=True, blank=True)
    delivery_date = models.DateField(null=True, blank=True)
    cargo_status = models.ForeignKey(CargoStatus, on_delete=models.CASCADE)
    images = models.ManyToManyField(Image)
    packaging_type = models.ForeignKey(PackagingType, on_delete=models.CASCADE)
    delivery_time = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    comment = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return self.product_code


# –ú–æ–¥–µ–ª—å –ì—Ä—É–∑–æ–≤
class Cargo(models.Model):
    client = models.ForeignKey(Client, on_delete=models.CASCADE)
    cargo_code = models.CharField(max_length=50, unique=True)
    products = models.ManyToManyField(Product)
    images = models.ManyToManyField(Image)
    qr_code = models.CharField(max_length=100, unique=True, blank=True, null=True)
    qr_created_at = models.DateTimeField(auto_now_add=True, null=True, blank=True)

    # –õ–æ–∫–∞—Ü–∏–∏
    departure_place = models.CharField(max_length=200, blank=True, null=True)
    destination_place = models.CharField(max_length=200, blank=True, null=True)

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    places_count = models.IntegerField(null=True, blank=True)  # –ö–û–õ. –ú–ï–°–¢
    weight = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    volume = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)

    # –¢–∞—Ä–∏—Ñ—ã/—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ
    cost = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)           # –ò—Ç–æ–≥ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ
    insurance = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)      # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞
    packaging_cost = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True) # –°–¢.–£–ü–ê–ö
    tariff_weight = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)  # —Ç–∞—Ä–∏—Ñ (–ø–æ –≤–µ—Å—É)
    tariff_min = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)     # —Ç–∞—Ä–∏—Ñ –æ—Ç ...

    # –ü—Ä–æ—á–µ–µ
    cargo_description = models.CharField(max_length=500, blank=True, null=True)  # —Ç–µ–∫—Å—Ç –∏–∑ CSV (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ)
    dimensions = models.CharField(max_length=30, blank=True, null=True)

    # –î–∞—Ç—ã –∏ —Å—Ç–∞—Ç—É—Å
    shipping_date = models.DateField(null=True, blank=True)
    delivery_date = models.DateField(null=True, blank=True)
    delivery_time = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)  # —á–∏—Å–ª–æ –¥–Ω–µ–π
    cargo_status = models.ForeignKey(CargoStatus, on_delete=models.CASCADE)
    packaging_type = models.ForeignKey(PackagingType, on_delete=models.CASCADE)

    def __str__(self):
        return self.cargo_code



# –ú–æ–¥–µ–ª—å –ö–æ–º–ø–∞–Ω–∏–π-–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤
class CarrierCompany(models.Model):
    name = models.CharField(max_length=255, unique=True)
    registration = models.CharField(max_length=50)
    description = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return self.name


# –ú–æ–¥–µ–ª—å –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π
class Vehicle(models.Model):
    license_plate = models.CharField(max_length=20, unique=True)
    model = models.CharField(max_length=100, blank=True, null=True)
    carrier_company = models.ForeignKey(CarrierCompany, on_delete=models.CASCADE)
    current_status = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return self.license_plate


# –ú–æ–¥–µ–ª—å –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö
class TransportBill(models.Model):
    bill_code = models.CharField(max_length=20, unique=True)
    cargos = models.ManyToManyField(Cargo)
    vehicle = models.ForeignKey(Vehicle, on_delete=models.CASCADE)
    departure_place = models.CharField(max_length=200, blank=True, null=True)
    destination_place = models.CharField(max_length=200, blank=True, null=True)
    departure_date = models.DateField()
    arrival_date = models.DateField(null=True, blank=True)
    carrier_company = models.ForeignKey(CarrierCompany, on_delete=models.CASCADE)

    def __str__(self):
        return self.bill_code


# –ú–æ–¥–µ–ª—å –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≥—Ä—É–∑–æ–≤
class CargoMovement(models.Model):
    cargo = models.ForeignKey(Cargo, on_delete=models.CASCADE)
    from_transport_bill = models.ForeignKey(TransportBill, related_name='from_transport_bill', on_delete=models.CASCADE)
    to_transport_bill = models.ForeignKey(TransportBill, related_name='to_transport_bill', on_delete=models.CASCADE)
    transfer_place = models.CharField(max_length=255, blank=True, null=True)
    transfer_date = models.DateTimeField()
    image = models.ForeignKey(Image, on_delete=models.SET_NULL, null=True, blank=True)
    qrscan = models.ForeignKey('QRScan', on_delete=models.SET_NULL, null=True, blank=True)
    operator = models.ForeignKey('accounts.CustomUser', on_delete=models.SET_NULL, null=True, blank=True)
    recognized_at = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f'Move {self.cargo} from {self.from_transport_bill} to {self.to_transport_bill}'


# –ú–æ–¥–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≥—Ä—É–∑–∞
class CargoStatusLog(models.Model):
    cargo = models.ForeignKey(Cargo, on_delete=models.CASCADE, related_name='status_logs')
    status = models.ForeignKey(CargoStatus, on_delete=models.CASCADE)
    changed_at = models.DateTimeField(auto_now_add=True)
    image = models.ForeignKey(Image, on_delete=models.SET_NULL, null=True, blank=True)
    qrscan = models.ForeignKey('QRScan', on_delete=models.SET_NULL, null=True, blank=True)
    operator = models.ForeignKey('accounts.CustomUser', on_delete=models.SET_NULL, null=True, blank=True)
    comment = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return f"{self.cargo.cargo_code} ‚Üí {self.status.name} ({self.changed_at.strftime('%Y-%m-%d %H:%M')})"

# --- –ü–õ–ê–¢–ï–ñ–ò ---

class Payment(models.Model):
    """
    –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞. –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è:
    - –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (payment_source='import_csv'),
    - –≤—Ä—É—á–Ω—É—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º,
    - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –≤–µ–±—Ö—É–∫–∞ –±–∞–Ω–∫–∞/–°–ë–ü (—Å qr_payload/reference_number).
    """
    payment_code = models.CharField(max_length=50, unique=True)  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–¥ –ø–ª–∞—Ç–µ–∂–∞
    payment_date = models.DateField()                             # –¥–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥

    client = models.ForeignKey(Client, on_delete=models.CASCADE)
    company = models.ForeignKey(Company, on_delete=models.CASCADE)

    # –°—É–º–º—ã –∏ –≤–∞–ª—é—Ç–∞
    currency = models.CharField(max_length=10, default='USD')
    amount_original = models.DecimalField(max_digits=15, decimal_places=2, null=True, blank=True)
    exchange_rate = models.DecimalField(max_digits=10, decimal_places=4, null=True, blank=True)
    amount_usd = models.DecimalField(max_digits=15, decimal_places=2)

    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    payment_method = models.CharField(max_length=50, blank=True, null=True)     # cash/bank/SBP/etc
    payment_source = models.CharField(max_length=50, default='manual')          # manual/import_csv/SBP/bank/web
    reference_number = models.CharField(max_length=100, blank=True, null=True)  # ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–Ω–∫–∞/–°–ë–ü
    qr_payload = models.TextField(blank=True, null=True)                        # —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ QR (JSON-—Å—Ç—Ä–æ–∫–∞)
    payer_phone = models.CharField(max_length=30, blank=True, null=True)

    # –ê—É–¥–∏—Ç
    verified_at = models.DateTimeField(blank=True, null=True)
    operator = models.ForeignKey('accounts.CustomUser', on_delete=models.SET_NULL, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    comment = models.TextField(blank=True, null=True)

    class Meta:
        indexes = [
            models.Index(fields=['payment_date']),
            models.Index(fields=['client']),
            models.Index(fields=['company']),
        ]
        constraints = [
            # –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç –¥—É–±–ª–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ä–∞–º–∫–∞—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            models.UniqueConstraint(fields=['reference_number', 'payment_source'],
                                    name='uniq_payment_ref_by_source',
                                    condition=~models.Q(reference_number=None)),
        ]

    def __str__(self):
        return f"{self.payment_code} | {self.client.client_code} | {self.amount_usd} {self.currency}"


class PaymentCargo(models.Model):
    """
    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –≥—Ä—É–∑–∞–º (—á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é).
    –û–¥–∏–Ω –ø–ª–∞—Ç—ë–∂ –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–∑–æ–≤, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.
    """
    payment = models.ForeignKey(Payment, on_delete=models.CASCADE, related_name='cargo_links')
    cargo = models.ForeignKey(Cargo, on_delete=models.CASCADE, related_name='payment_links')
    amount_usd = models.DecimalField(max_digits=15, decimal_places=2)  # —á–∞—Å—Ç—å —Å—É–º–º—ã, –∏–¥—É—â–∞—è –Ω–∞ —ç—Ç–æ—Ç –≥—Ä—É–∑
    comment = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        unique_together = [('payment', 'cargo')]
        indexes = [
            models.Index(fields=['payment']),
            models.Index(fields=['cargo']),
        ]

    def __str__(self):
        return f"{self.payment.payment_code} ‚Üí {self.cargo.cargo_code}: {self.amount_usd} USD"
